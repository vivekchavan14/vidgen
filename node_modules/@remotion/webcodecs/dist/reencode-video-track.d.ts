import type { MediaParserLogLevel, MediaParserOnVideoSample, MediaParserVideoTrack } from '@remotion/media-parser';
import type { ConvertMediaOnVideoFrame } from './convert-media';
import type { MediaFn } from './create/media-fn';
import type { ProgressTracker } from './create/progress-tracker';
import type { VideoOperation } from './on-video-track-handler';
import type { ConvertMediaProgressFn } from './throttled-state-update';
import type { WebCodecsController } from './webcodecs-controller';
export declare const reencodeVideoTrack: ({ videoOperation, rotate, track, logLevel, abortConversion, onMediaStateUpdate, controller, onVideoFrame, state, progressTracker, }: {
    videoOperation: VideoOperation;
    rotate: number;
    track: MediaParserVideoTrack;
    logLevel: MediaParserLogLevel;
    abortConversion: (errCause: Error) => void;
    onMediaStateUpdate: null | ConvertMediaProgressFn;
    controller: WebCodecsController;
    onVideoFrame: ConvertMediaOnVideoFrame | null;
    state: MediaFn;
    progressTracker: ProgressTracker;
}) => Promise<MediaParserOnVideoSample | null>;
