import type { MediaParserLogLevel, MediaParserOnVideoTrack } from '@remotion/media-parser';
import type { ConvertMediaOnVideoFrame } from './convert-media';
import type { MediaFn } from './create/media-fn';
import type { ProgressTracker } from './create/progress-tracker';
import type { ConvertMediaContainer } from './get-available-containers';
import type { ConvertMediaVideoCodec } from './get-available-video-codecs';
import type { ConvertMediaOnVideoTrackHandler } from './on-video-track-handler';
import type { ResizeOperation } from './resizing/mode';
import type { ConvertMediaProgressFn } from './throttled-state-update';
import type { WebCodecsController } from './webcodecs-controller';
export declare const makeVideoTrackHandler: ({ state, onVideoFrame, onMediaStateUpdate, abortConversion, controller, defaultVideoCodec, onVideoTrack, logLevel, outputContainer, rotate, resizeOperation, progressTracker, }: {
    state: MediaFn;
    onVideoFrame: null | ConvertMediaOnVideoFrame;
    onMediaStateUpdate: null | ConvertMediaProgressFn;
    abortConversion: (errCause: Error) => void;
    controller: WebCodecsController;
    defaultVideoCodec: ConvertMediaVideoCodec | null;
    onVideoTrack: ConvertMediaOnVideoTrackHandler | null;
    logLevel: MediaParserLogLevel;
    outputContainer: ConvertMediaContainer;
    rotate: number;
    resizeOperation: ResizeOperation | null;
    progressTracker: ProgressTracker;
}) => MediaParserOnVideoTrack;
