import { type MediaParserLogLevel, type MediaParserOnAudioTrack } from '@remotion/media-parser';
import type { ConvertMediaOnAudioData } from './convert-media';
import type { MediaFn } from './create/media-fn';
import type { ProgressTracker } from './create/progress-tracker';
import type { ConvertMediaAudioCodec } from './get-available-audio-codecs';
import type { ConvertMediaContainer } from './get-available-containers';
import type { ConvertMediaOnAudioTrackHandler } from './on-audio-track-handler';
import type { ConvertMediaProgressFn } from './throttled-state-update';
import type { WebCodecsController } from './webcodecs-controller';
export declare const makeAudioTrackHandler: ({ state, defaultAudioCodec: audioCodec, controller, abortConversion, onMediaStateUpdate, onAudioTrack, logLevel, outputContainer, onAudioData, progressTracker, }: {
    state: MediaFn;
    defaultAudioCodec: ConvertMediaAudioCodec | null;
    controller: WebCodecsController;
    abortConversion: (errCause: Error) => void;
    onMediaStateUpdate: null | ConvertMediaProgressFn;
    onAudioTrack: ConvertMediaOnAudioTrackHandler | null;
    logLevel: MediaParserLogLevel;
    outputContainer: ConvertMediaContainer;
    onAudioData: ConvertMediaOnAudioData | null;
    progressTracker: ProgressTracker;
}) => MediaParserOnAudioTrack;
