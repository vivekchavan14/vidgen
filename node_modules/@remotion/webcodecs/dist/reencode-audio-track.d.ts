import type { MediaParserAudioTrack, MediaParserLogLevel, MediaParserOnAudioSample } from '@remotion/media-parser';
import type { ConvertMediaOnAudioData } from './convert-media';
import type { MediaFn } from './create/media-fn';
import type { ProgressTracker } from './create/progress-tracker';
import type { AudioOperation } from './on-audio-track-handler';
import type { ConvertMediaProgressFn } from './throttled-state-update';
import type { WebCodecsController } from './webcodecs-controller';
export declare const reencodeAudioTrack: ({ audioOperation, track, logLevel, abortConversion, state, controller, onMediaStateUpdate, onAudioData, progressTracker, }: {
    audioOperation: AudioOperation;
    track: MediaParserAudioTrack;
    logLevel: MediaParserLogLevel;
    abortConversion: (errCause: Error) => void;
    state: MediaFn;
    controller: WebCodecsController;
    onMediaStateUpdate: null | ConvertMediaProgressFn;
    onAudioData: ConvertMediaOnAudioData | null;
    progressTracker: ProgressTracker;
}) => Promise<MediaParserOnAudioSample | null>;
