"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const __1 = require("..");
const RemotionRoot_1 = require("../RemotionRoot");
const expect_to_throw_1 = require("./expect-to-throw");
const AnyComp = () => null;
test('It should report invalid component name', () => {
    expect_to_throw_1.expectToThrow(() => react_1.render(jsx_runtime_1.jsx(__1.Composition, { lazyComponent: () => Promise.resolve({ default: AnyComp }), durationInFrames: 100, fps: 30, height: 100, name: "invalid@name", width: 100 }, void 0)), /can only contain/);
});
test('It should validate the component name', () => {
    expect(() => react_1.render(jsx_runtime_1.jsx(__1.Composition, { lazyComponent: () => Promise.resolve({ default: AnyComp }), durationInFrames: 100, fps: 30, height: 100, name: "valid-name", width: 100 }, void 0))).not.toThrow();
});
test('It should throw if no name is passed', () => {
    expect_to_throw_1.expectToThrow(() => react_1.render(
    // @ts-expect-error
    jsx_runtime_1.jsx(__1.Composition, { lazyComponent: () => Promise.resolve({ default: AnyComp }), durationInFrames: 100, fps: 30, height: 100, width: 100 }, void 0)), /No name for composition passed./);
});
test('It should throw if multiple components have the same name', () => {
    expect_to_throw_1.expectToThrow(() => react_1.render(jsx_runtime_1.jsxs(RemotionRoot_1.RemotionRoot, { children: [jsx_runtime_1.jsx(__1.Composition, { lazyComponent: () => Promise.resolve({ default: AnyComp }), durationInFrames: 100, fps: 30, height: 100, width: 100, name: "name" }, void 0),
            jsx_runtime_1.jsx(__1.Composition, { lazyComponent: () => Promise.resolve({ default: AnyComp }), durationInFrames: 100, fps: 30, height: 100, width: 100, name: "name" }, void 0)] }, void 0)), /Multiple composition with name name/);
});
//# sourceMappingURL=composition-rules.test.js.map