"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Composition = void 0;
const react_1 = __importStar(require("react"));
const CompositionManager_1 = require("./CompositionManager");
const register_root_1 = require("./register-root");
const Composition = ({ width, height, fps, durationInFrames, name, props, ...compProps }) => {
    const { registerComposition, unregisterComposition } = react_1.useContext(CompositionManager_1.CompositionManager);
    const lazy = react_1.useMemo(() => {
        if ('lazyComponent' in compProps) {
            return react_1.default.lazy(compProps.lazyComponent);
        }
        if ('component' in compProps) {
            return react_1.default.lazy(() => Promise.resolve({ default: compProps.component }));
        }
        throw new Error("You must pass either 'component' or 'lazyComponent'");
        // eslint-disable-next-line react-hooks/exhaustive-deps
        // @ts-expect-error
    }, [compProps.lazyComponent, compProps.component]);
    react_1.useEffect(() => {
        // Ensure it's a URL safe name
        if (!name) {
            throw new Error('No name for composition passed.');
        }
        if (!name.match(/^([a-zA-Z0-9-])+$/g)) {
            throw new Error(`Composition name can only contain a-z, A-Z, 0-9 and -. You passed ${name}`);
        }
        registerComposition({
            durationInFrames,
            fps,
            height,
            width,
            name,
            component: lazy,
            props,
        });
        return () => {
            unregisterComposition(name);
        };
    }, [
        durationInFrames,
        fps,
        height,
        lazy,
        name,
        props,
        registerComposition,
        unregisterComposition,
        width,
    ]);
    if (register_root_1.getShouldStaticallyReturnCompositions()) {
        register_root_1.addStaticComposition({
            component: lazy,
            durationInFrames,
            fps,
            height,
            name,
            width,
        });
    }
    return null;
};
exports.Composition = Composition;
//# sourceMappingURL=Composition.js.map