"use strict";
// Taken from https://github.com/facebook/react-native/blob/0b9ea60b4fee8cacc36e7160e31b91fc114dbc0d/Libraries/Animated/src/nodes/AnimatedInterpolation.js
Object.defineProperty(exports, "__esModule", { value: true });
exports.interpolate = void 0;
function interpolate(input, inputRange, outputRange, options) {
    var _a, _b, _c;
    const extrapolateLeft = (_a = options === null || options === void 0 ? void 0 : options.extrapolateLeft) !== null && _a !== void 0 ? _a : 'extend';
    const extrapolateRight = (_b = options === null || options === void 0 ? void 0 : options.extrapolateRight) !== null && _b !== void 0 ? _b : 'extend';
    const easing = (_c = options === null || options === void 0 ? void 0 : options.easing) !== null && _c !== void 0 ? _c : ((num) => num);
    let result = input;
    const [inputMin, inputMax] = inputRange;
    const [outputMin, outputMax] = outputRange;
    if (result < inputMin) {
        if (extrapolateLeft === 'identity') {
            return result;
        }
        else if (extrapolateLeft === 'clamp') {
            result = inputMin;
        }
        else if (extrapolateLeft === 'extend') {
            // noop
        }
    }
    if (result > inputMax) {
        if (extrapolateRight === 'identity') {
            return result;
        }
        else if (extrapolateRight === 'clamp') {
            result = inputMax;
        }
        else if (extrapolateRight === 'extend') {
            // noop
        }
    }
    if (outputMin === outputMax) {
        return outputMin;
    }
    if (inputMin === inputMax) {
        if (input <= inputMin) {
            return outputMin;
        }
        return outputMax;
    }
    // Input Range
    if (inputMin === -Infinity) {
        result = -result;
    }
    else if (inputMax === Infinity) {
        result = result - inputMin;
    }
    else {
        result = (result - inputMin) / (inputMax - inputMin);
    }
    // Easing
    result = easing(result);
    // Output Range
    if (outputMin === -Infinity) {
        result = -result;
    }
    else if (outputMax === Infinity) {
        result = result + outputMin;
    }
    else {
        result = result * (outputMax - outputMin) + outputMin;
    }
    return result;
}
exports.interpolate = interpolate;
//# sourceMappingURL=interpolate.js.map