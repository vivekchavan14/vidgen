"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompositionName = exports.addStaticComposition = exports.getShouldStaticallyReturnCompositions = exports.evaluateRootForCompositions = exports.getRoot = exports.registerRoot = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const RemotionRoot_1 = require("./RemotionRoot");
let root = null;
let shouldStaticallyReturnCompositions = false;
// Ok to have components with various prop types
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const staticCompositions = [];
const registerRoot = (comp) => {
    if (root) {
        throw new Error('registerRoot() was called more than once.');
    }
    root = comp;
};
exports.registerRoot = registerRoot;
const getRoot = () => {
    return root;
};
exports.getRoot = getRoot;
const evaluateRootForCompositions = async () => {
    shouldStaticallyReturnCompositions = true;
    const Root = exports.getRoot();
    if (!Root) {
        throw new Error('There is no root');
    }
    const { renderToStaticMarkup } = await Promise.resolve().then(() => __importStar(require('react-dom/server')));
    const markup = (jsx_runtime_1.jsx(RemotionRoot_1.RemotionRoot, { children: jsx_runtime_1.jsx(Root, {}, void 0) }, void 0));
    renderToStaticMarkup(markup);
    return staticCompositions;
};
exports.evaluateRootForCompositions = evaluateRootForCompositions;
const getShouldStaticallyReturnCompositions = () => shouldStaticallyReturnCompositions;
exports.getShouldStaticallyReturnCompositions = getShouldStaticallyReturnCompositions;
const addStaticComposition = (composition) => {
    staticCompositions.push(composition);
};
exports.addStaticComposition = addStaticComposition;
const getCompositionName = () => {
    const param = new URLSearchParams(window.location.search).get('composition');
    if (param !== null) {
        return String(param);
    }
    throw new Error('No comp name specified in URL');
};
exports.getCompositionName = getCompositionName;
//# sourceMappingURL=register-root.js.map