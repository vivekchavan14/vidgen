/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Speechify from "../../../../../index";
import * as stream from "stream";
export declare namespace Audio {
    interface Options {
        environment?: core.Supplier<environments.SpeechifyEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Audio {
    protected readonly _options: Audio.Options;
    constructor(_options?: Audio.Options);
    /**
     * Gets the speech data for the given input
     *
     * @param {Speechify.tts.GetSpeechRequest} request
     * @param {Audio.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.PaymentRequiredError}
     * @throws {@link Speechify.tts.ForbiddenError}
     * @throws {@link Speechify.tts.InternalServerError}
     *
     * @example
     *     await client.tts.audio.speech({
     *         input: "input",
     *         voiceId: "voice_id"
     *     })
     */
    speech(request: Speechify.tts.GetSpeechRequest, requestOptions?: Audio.RequestOptions): Promise<Speechify.tts.GetSpeechResponse>;
    /**
     * Gets the stream speech for the given input
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.PaymentRequiredError}
     * @throws {@link Speechify.tts.ForbiddenError}
     * @throws {@link Speechify.tts.InternalServerError}
     */
    stream(request: Speechify.tts.GetStreamRequest, requestOptions?: Audio.RequestOptions): Promise<stream.Readable>;
    protected _getAuthorizationHeader(): Promise<string>;
}
