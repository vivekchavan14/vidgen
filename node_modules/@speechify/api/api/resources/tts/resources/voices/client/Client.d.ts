/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Speechify from "../../../../../index";
import * as stream from "stream";
export declare namespace Voices {
    interface Options {
        environment?: core.Supplier<environments.SpeechifyEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Voices {
    protected readonly _options: Voices.Options;
    constructor(_options?: Voices.Options);
    /**
     * Gets the list of voices available for the user
     *
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.NotFoundError}
     * @throws {@link Speechify.tts.InternalServerError}
     *
     * @example
     *     await client.tts.voices.list()
     */
    list(requestOptions?: Voices.RequestOptions): Promise<Speechify.tts.GetVoice[]>;
    /**
     * Create a personal (cloned) voice for the user
     *
     * @param {Speechify.tts.VoicesCreateRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.PaymentRequiredError}
     * @throws {@link Speechify.tts.InternalServerError}
     *
     * @example
     *     await client.tts.voices.create({
     *         sample: fs.createReadStream("/path/to/your/file"),
     *         name: "name",
     *         gender: "male",
     *         consent: "consent"
     *     })
     */
    create(request: Speechify.tts.VoicesCreateRequest, requestOptions?: Voices.RequestOptions): Promise<Speechify.tts.CreatedVoice>;
    /**
     * Delete a personal (cloned) voice
     *
     * @param {string} id - The ID of the voice to delete
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.NotFoundError}
     * @throws {@link Speechify.tts.InternalServerError}
     *
     * @example
     *     await client.tts.voices.delete("id")
     */
    delete(id: string, requestOptions?: Voices.RequestOptions): Promise<void>;
    /**
     * Download a personal (cloned) voice sample
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.UnauthorizedError}
     * @throws {@link Speechify.tts.NotFoundError}
     * @throws {@link Speechify.tts.InternalServerError}
     */
    downloadSample(id: string, requestOptions?: Voices.RequestOptions): Promise<stream.Readable>;
    protected _getAuthorizationHeader(): Promise<string>;
}
