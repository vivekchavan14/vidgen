/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Speechify from "../../../../../index";
export declare namespace Auth {
    interface Options {
        environment?: core.Supplier<environments.SpeechifyEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Auth {
    protected readonly _options: Auth.Options;
    constructor(_options?: Auth.Options);
    /**
     * WARNING: This endpoint is deprecated. Create a new API token for the logged in user.
     *
     * @param {Speechify.tts.CreateAccessTokenRequest} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.BadRequestError}
     *
     * @example
     *     await client.tts.auth.createAccessToken({})
     */
    createAccessToken(request: Speechify.tts.CreateAccessTokenRequest, requestOptions?: Auth.RequestOptions): Promise<Speechify.tts.AccessToken>;
    protected _getAuthorizationHeader(): Promise<string>;
}
